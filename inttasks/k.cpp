#include <iostream>
#include <vector>
#include <queue>
  
using namespace std;
  
int main() {
    int n;
    cin >> n;

  
    int count = 0;
  
    for(int i = 0; i < n; i++) {
        int m;
        cin >> m;

        vector<int> vec(26, 0); /*крч это алфавит англ */
        queue<char> dq; //работем с симвловами поэтому чар
  

        for(int j = 0; j < m; j++) {
            char c; // это наши буквы/символы
            cin >> c;

            vec[c - 'a']++; /*
            - `'a' - 'a' = 97 - 97 = 0`
             `'b' - 'a' = 98 - 97 = 1`
            `'c' - 'a' = 99 - 97 = 2`
             короче допустим первый елемент 'а' и ('a' - 'a') будет 0  типо vec[0] и ++ это типо счетчик
              наш елемент получается елемент с индексом ноль будет равен vec[0] = 1,
               следом идет у нас 'б' а в аски коде 'b'=98 и 98 - 97 будет 1 получается у елемента b индекс будет 1
                и так далее если б встретится еще раз уже б равен будет 2   и соотвецтвенно индекс   */
            dq.push(c); // и кладем его в конец

            while(!dq.empty() && vec[dq.front() - 'a'] > 1) { 
            /*
            получается он делает так например у нас три штук b у  и отнимаем а и это у нас 98 - 97 и типо индекс 1
             а индекс один у нас равен 3 
            и тут vec[dq.front() - 'a'] это наш первый елемент в начале он а и мы смотрим - Первый `'a'`:
            
        
        - `freq['a'-'a'] = freq[0]++ → 1`   
        - `q = [a]`   
        - Проверка: `freq['a'] = 1` → уникальная → вывод `a`. 
        - Второй `'a'`
            - `freq['a'-'a'] = freq[0]++ → 2`
            - `q = [a, a]`
            - Проверка: `q.front() = 'a'`, `freq['a'] = 2 > 1` → убираем первый `a`.
            - Теперь `q = [a]`, но у него `freq['a'] = 2`, так что он тоже **не уникальный** → убираем и второй.
            
            - `q = []` → вывод `-1`. 
              ### 2. Что делает `freq[q.front() - 'a'] > 1`
        - Смотрим **на букву в начале очереди** `q.front()`.
        - Берём её индекс в массиве `freq`.
        - Проверяем: встречалась ли эта буква более одного раза?
            - Если **да (`> 1`)** → значит буква **повторилась** → она уже **не уникальна** → её можно выбросить из начала очереди.
            - Если **нет (`== 1`)** → она пока уникальна → оставляем её в начале.*/
                dq.pop();
            }
            if (dq.empty()) {
                cout << -1 << " ";
            } else {
                cout << dq.front() << " ";
            }
        }
        cout << endl;
    }
    return 0;
}
